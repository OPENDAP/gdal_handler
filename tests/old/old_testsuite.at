m4_include([package.m4])

# The template file used to create the input files for besstandalone
m4_define([bescmd_template],[$abs_srcdir/template.bescmd.in])
m4_define([bes_conf_path],[$abs_builddir/bes.conf])

m4_define([baselines_path],[${abs_srcdir}/baselines])
m4_define([full_data_path],[${abs_srcdir}/../data/ncml])

AT_INIT([gdal autotest testsuite])

dnl $1 == filename
dnl $2 == {das | dds | dods | ddx }
m4_define([AT_MAKE_BESCMD_FILE_NO_CONSTRAINT],
[
sed -e "s:%filename%:$1:" -e "s:%response_type%:$2:" -e "s|%constraint_expr%||" < bescmd_template > test.bescmd
])

dnl $1 == filename
dnl $2 == {das | dds | dods | ddx }
dnl $3 == "constraint_expr"
m4_define([AT_MAKE_BESCMD_FILE_WITH_CONSTRAINT],
[
sed -e "s:%filename%:$1:" -e "s:%response_type%:$2:" -e "s|%constraint_expr%|<constraint>$3</constraint>|" < bescmd_template > test.bescmd
])

dnl $1 == filename
dnl $2 == {das | dds | dods | ddx }
dnl $3 == "constraint_expr" (can be [] if none)
m4_define([AT_MAKE_BESCMD_FILE],
[
m4_if([$3], [], [AT_MAKE_BESCMD_FILE_NO_CONSTRAINT([$1], [$2])], [AT_MAKE_BESCMD_FILE_WITH_CONSTRAINT([$1], [$2], [$3])]) 
])


dnl Run the besstandlone on the filename for the response type
dnl and compare stdout to the baseline for the response.
dnl filename is expected to be the basename, relative to the gdal_handler dir.
dnl $1 == filename
dnl $2 == {das | dds | dods | ddx }
dnl $3 == baseline_filename (with path prefix but not response suffix!)
dnl $4 == (optional) constraint_expression
m4_define([AT_RUN_BES_AND_COMPARE],
[
AT_SETUP([Comparing $2 response for $1 to baseline $3])
AT_KEYWORDS([$2])
AT_MAKE_BESCMD_FILE([$1], [$2], [$4])
AT_CHECK([besstandalone -c bes_conf_path -i ./test.bescmd], [], [stdout], [ignore])
AT_CHECK([diff -w -b -B $3.$2 stdout], [], [ignore], [], [])
AT_CLEANUP
])

dnl Run the besstandlone on the filename for the response type
dnl then run getdap on stdout and compare the result to the baseline for the response.
dnl filename is expected to be the basename, relative to the gdal_handler dir.
dnl The baseline will have ".dods.getdap" appended to it for ascii comparison; .dods is binary compare.
dnl $1 == filename
dnl $2 == baseline_filename (with path prefix but not response suffix!)
dnl $3 == (optional) constraint_expression
m4_define([AT_RUN_BES_AND_COMPARE_DODS_GETDAP],
[
AT_SETUP([Comparing dods response for $1 to getdap (ascii) baseline baselines_path/$2])
AT_KEYWORDS([dods])
AT_MAKE_BESCMD_FILE([$1], [dods], [$3])
AT_CHECK([besstandalone -c bes_conf_path -i ./test.bescmd], [], [stdout], [ignore])
AT_CHECK([getdap stdout > stdout.getdap], [], [ignore], [ignore])
AT_CHECK([diff -w -b -B $2.dods.getdap stdout.getdap], [], [ignore], [], [])
AT_CLEANUP
])

dnl Run the besstandalone for the response type and log to stdout,
dnl then do a string match on stdout to $3 to find a pattern.
dnl Useful for checking for Parse Errors, etc.
dnl $1 == filename
dnl $2 ==  {das | dds | dods | ddx }
dnl $3 == "pattern"
dnl $4 == (optional) constraint_expression
dnl $5 == (optional) expected besstandalone return status
m4_define([AT_RUN_BES_AND_MATCH],
[
AT_SETUP([$2 response for $1: seeking match to $3])
AT_KEYWORDS([$2])
AT_MAKE_BESCMD_FILE([$1], [$2], [$4])
AT_CHECK([besstandalone -c bes_conf_path -i ./test.bescmd], [$5], [stdout], [ignore])
AT_CHECK([grep $3 stdout], [], [ignore], [], [])
AT_CLEANUP
])



